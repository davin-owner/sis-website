


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE SCHEMA IF NOT EXISTS "public";


ALTER SCHEMA "public" OWNER TO "pg_database_owner";


COMMENT ON SCHEMA "public" IS 'standard public schema';


SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."leads" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "studio_name" "text" NOT NULL,
    "contact_name" "text",
    "contact_email" "text",
    "contact_phone" "text",
    "address" "text",
    "city" "text",
    "state" "text",
    "zip_code" "text",
    "status" "text" DEFAULT 'new'::"text",
    "source" "text",
    "notes" "text",
    "converted_to_shop_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "owner_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    CONSTRAINT "leads_status_check" CHECK (("status" = ANY (ARRAY['new'::"text", 'contacted'::"text", 'qualified'::"text", 'demo_scheduled'::"text", 'proposal_sent'::"text", 'converted'::"text", 'lost'::"text"])))
);


ALTER TABLE "public"."leads" OWNER TO "postgres";


COMMENT ON TABLE "public"."leads" IS 'Prospective tattoo shops that Simple Ink Studios is trying to sign as clients';



CREATE TABLE IF NOT EXISTS "public"."shop_appointments" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "scheduled_for" timestamp without time zone,
    "name" "text",
    "prefered_artist" "text",
    "shop_id" "uuid"
);


ALTER TABLE "public"."shop_appointments" OWNER TO "postgres";


COMMENT ON TABLE "public"."shop_appointments" IS 'This will be appointments created for the shop owners and that their clients schedule for';



ALTER TABLE "public"."shop_appointments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."shop_appointments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."shop_leads" (
    "id" bigint NOT NULL,
    "shop_id" "uuid",
    "name" "text",
    "contact_email" "text",
    "contact_phone" integer,
    "notes" "text",
    "perfered_artist_id" "text",
    "session_count" integer,
    "deposit_status" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."shop_leads" OWNER TO "postgres";


COMMENT ON TABLE "public"."shop_leads" IS 'This is the clients of the leads, for them to track people wanting tattoos.';



ALTER TABLE "public"."shop_leads" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."shop_leads_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."shop_tasks" (
    "id" bigint NOT NULL,
    "shop_id" "uuid" DEFAULT "gen_random_uuid"(),
    "task_text" "text",
    "is_completed" boolean,
    "category" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."shop_tasks" OWNER TO "postgres";


COMMENT ON TABLE "public"."shop_tasks" IS 'this table is for saving the tasks users can make for their shop';



ALTER TABLE "public"."shop_tasks" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."shop_tasks_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."shop_users" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "shop_id" "uuid",
    "user_id" "uuid",
    "role" "text" NOT NULL,
    "permissions" "jsonb",
    "last_accessed_at" timestamp with time zone DEFAULT "now"(),
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."shop_users" OWNER TO "postgres";


COMMENT ON TABLE "public"."shop_users" IS 'Junction table for user-shop relationships with roles and permissions';



CREATE TABLE IF NOT EXISTS "public"."shop_workers" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "shop_id" "uuid" NOT NULL,
    "first_name" "text" NOT NULL,
    "last_name" "text" NOT NULL,
    "email" "text",
    "phone" "text",
    "status" "text" DEFAULT 'active'::"text",
    "hire_date" "date",
    "hourly_rate" numeric(10,2),
    "specialties" "text"[],
    "notes" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    CONSTRAINT "shop_workers_status_check" CHECK (("status" = ANY (ARRAY['active'::"text", 'inactive'::"text", 'on_leave'::"text"])))
);


ALTER TABLE "public"."shop_workers" OWNER TO "postgres";


COMMENT ON TABLE "public"."shop_workers" IS 'Tattoo artists working at each tattoo shop (client studio)';



CREATE TABLE IF NOT EXISTS "public"."shops_tables" (
    "shop_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "shop_name" "text" NOT NULL,
    "shop_owner" "uuid",
    "shop_address" "text" NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp without time zone DEFAULT "now"() NOT NULL,
    "amount_of_workers" integer NOT NULL
);


ALTER TABLE "public"."shops_tables" OWNER TO "postgres";


COMMENT ON TABLE "public"."shops_tables" IS 'this is the cleints/shops that pay to use my software they are the direct clients of me the owner of Simple ink studios';



CREATE TABLE IF NOT EXISTS "public"."waitlist" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "email" "text",
    "phone" "text",
    "shop_name" "text",
    "city_state" "text",
    "message" "text",
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."waitlist" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."waitlist_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE "public"."waitlist_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."waitlist_id_seq" OWNED BY "public"."waitlist"."id";



ALTER TABLE ONLY "public"."waitlist" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."waitlist_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."leads"
    ADD CONSTRAINT "leads_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."shop_appointments"
    ADD CONSTRAINT "shop_appointments_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."shop_leads"
    ADD CONSTRAINT "shop_leads_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."shop_tasks"
    ADD CONSTRAINT "shop_tasks_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."shop_users"
    ADD CONSTRAINT "shop_users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."shop_users"
    ADD CONSTRAINT "shop_users_user_id_shop_id_key" UNIQUE ("user_id", "shop_id");



ALTER TABLE ONLY "public"."shop_workers"
    ADD CONSTRAINT "shop_workers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."shops_tables"
    ADD CONSTRAINT "shops_tables_pkey" PRIMARY KEY ("shop_id");



ALTER TABLE ONLY "public"."waitlist"
    ADD CONSTRAINT "waitlist_pkey" PRIMARY KEY ("id");



CREATE INDEX "leads_created_at_idx" ON "public"."leads" USING "btree" ("created_at" DESC);



CREATE INDEX "leads_owner_id_idx" ON "public"."leads" USING "btree" ("owner_id");



CREATE INDEX "leads_status_idx" ON "public"."leads" USING "btree" ("status");



CREATE INDEX "shop_users_shop_id_idx" ON "public"."shop_users" USING "btree" ("shop_id");



CREATE INDEX "shop_users_user_id_idx" ON "public"."shop_users" USING "btree" ("user_id");



CREATE INDEX "shop_workers_shop_id_idx" ON "public"."shop_workers" USING "btree" ("shop_id");



CREATE INDEX "shop_workers_status_idx" ON "public"."shop_workers" USING "btree" ("status");



CREATE INDEX "waitlist_created_at_idx" ON "public"."waitlist" USING "btree" ("created_at" DESC);



ALTER TABLE ONLY "public"."leads"
    ADD CONSTRAINT "leads_converted_to_shop_id_fkey" FOREIGN KEY ("converted_to_shop_id") REFERENCES "public"."shops_tables"("shop_id");



ALTER TABLE ONLY "public"."leads"
    ADD CONSTRAINT "leads_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."shop_appointments"
    ADD CONSTRAINT "shop_appointments_shop_id_fkey" FOREIGN KEY ("shop_id") REFERENCES "public"."shops_tables"("shop_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."shop_leads"
    ADD CONSTRAINT "shop_leads_shop_id_fkey" FOREIGN KEY ("shop_id") REFERENCES "public"."shops_tables"("shop_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."shop_tasks"
    ADD CONSTRAINT "shop_tasks_shop_id_fkey" FOREIGN KEY ("shop_id") REFERENCES "public"."shops_tables"("shop_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."shop_users"
    ADD CONSTRAINT "shop_users_shop_id_fkey" FOREIGN KEY ("shop_id") REFERENCES "public"."shops_tables"("shop_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."shop_users"
    ADD CONSTRAINT "shop_users_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."shop_workers"
    ADD CONSTRAINT "shop_workers_shop_id_fkey" FOREIGN KEY ("shop_id") REFERENCES "public"."shops_tables"("shop_id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "anon_can_insert" ON "public"."waitlist" FOR INSERT TO "anon" WITH CHECK (true);



CREATE POLICY "auth_full_access" ON "public"."waitlist" TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "authenticated_users_can_create_shops" ON "public"."shops_tables" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "shop_owner"));



ALTER TABLE "public"."leads" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "leads_owner_full_access" ON "public"."leads" USING (("owner_id" = "auth"."uid"())) WITH CHECK (("owner_id" = "auth"."uid"()));



CREATE POLICY "owners_can_delete_shops" ON "public"."shops_tables" FOR DELETE USING (("shop_id" IN ( SELECT "shop_users"."shop_id"
   FROM "public"."shop_users"
  WHERE (("shop_users"."user_id" = "auth"."uid"()) AND ("shop_users"."role" = 'owner'::"text")))));



CREATE POLICY "owners_can_insert_shops" ON "public"."shops_tables" FOR INSERT WITH CHECK (("shop_owner" = "auth"."uid"()));



CREATE POLICY "owners_can_update_shops" ON "public"."shops_tables" FOR UPDATE USING (("shop_id" IN ( SELECT "shop_users"."shop_id"
   FROM "public"."shop_users"
  WHERE (("shop_users"."user_id" = "auth"."uid"()) AND ("shop_users"."role" = 'owner'::"text")))));



ALTER TABLE "public"."shop_appointments" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."shop_leads" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."shop_tasks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."shop_users" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "shop_users_can_manage_workers" ON "public"."shop_workers" USING (("shop_id" IN ( SELECT "shop_users"."shop_id"
   FROM "public"."shop_users"
  WHERE ("shop_users"."user_id" = "auth"."uid"()))));



ALTER TABLE "public"."shop_workers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."shops_tables" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "users_can_add_themselves_to_shops" ON "public"."shop_users" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "users_can_read_their_shops" ON "public"."shops_tables" FOR SELECT USING (("shop_id" IN ( SELECT "shop_users"."shop_id"
   FROM "public"."shop_users"
  WHERE ("shop_users"."user_id" = "auth"."uid"()))));



CREATE POLICY "users_own_access" ON "public"."shop_users" USING (("user_id" = "auth"."uid"())) WITH CHECK (("user_id" = "auth"."uid"()));



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



GRANT ALL ON TABLE "public"."leads" TO "anon";
GRANT ALL ON TABLE "public"."leads" TO "authenticated";
GRANT ALL ON TABLE "public"."leads" TO "service_role";



GRANT ALL ON TABLE "public"."shop_appointments" TO "anon";
GRANT ALL ON TABLE "public"."shop_appointments" TO "authenticated";
GRANT ALL ON TABLE "public"."shop_appointments" TO "service_role";



GRANT ALL ON SEQUENCE "public"."shop_appointments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."shop_appointments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."shop_appointments_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."shop_leads" TO "anon";
GRANT ALL ON TABLE "public"."shop_leads" TO "authenticated";
GRANT ALL ON TABLE "public"."shop_leads" TO "service_role";



GRANT ALL ON SEQUENCE "public"."shop_leads_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."shop_leads_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."shop_leads_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."shop_tasks" TO "anon";
GRANT ALL ON TABLE "public"."shop_tasks" TO "authenticated";
GRANT ALL ON TABLE "public"."shop_tasks" TO "service_role";



GRANT ALL ON SEQUENCE "public"."shop_tasks_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."shop_tasks_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."shop_tasks_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."shop_users" TO "anon";
GRANT ALL ON TABLE "public"."shop_users" TO "authenticated";
GRANT ALL ON TABLE "public"."shop_users" TO "service_role";



GRANT ALL ON TABLE "public"."shop_workers" TO "anon";
GRANT ALL ON TABLE "public"."shop_workers" TO "authenticated";
GRANT ALL ON TABLE "public"."shop_workers" TO "service_role";



GRANT ALL ON TABLE "public"."shops_tables" TO "anon";
GRANT ALL ON TABLE "public"."shops_tables" TO "authenticated";
GRANT ALL ON TABLE "public"."shops_tables" TO "service_role";



GRANT ALL ON TABLE "public"."waitlist" TO "anon";
GRANT ALL ON TABLE "public"."waitlist" TO "authenticated";
GRANT ALL ON TABLE "public"."waitlist" TO "service_role";



GRANT ALL ON SEQUENCE "public"."waitlist_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."waitlist_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."waitlist_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";







RESET ALL;
